plugins {
    id 'java'
    id 'maven-publish'
    id 'java-library'
    id "io.ebean" version "13.20.1" apply(false)
}
group 'org.start2do'

version '3.0.1-SNAPSHOT'
allprojects {
    apply {
        plugin 'java'
        plugin 'maven-publish'
        plugin 'java-library'
        plugin "io.ebean"
    }
    repositories {
        mavenLocal()
        maven { url 'https://mirrors.cloud.tencent.com/nexus/repository/maven-public/' }
        maven { url 'https://mirrors.163.com/maven/repository/maven-public/' }
        maven { url 'https://mirrors.huaweicloud.com/repository/maven/' }
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    ext {
        pushMavenUrl = "http://192.168.30.110:8081/repository/zte-releases/"
        SNAPSHOTpushMavenUrl = "http://192.168.30.110:8081/repository/zte-snapshots/"
        lombokVersion = '1.18.22'
        jasperreportsVersion = '6.19.1'
        mapstructVersion = "1.4.2.Final"
        ebeanVersion = "13.20.1-jakarta"
        vertxVersion = '4.3.4'
        springBootVersion = '3.0.6'
        springVersion = '6.0.3'
        springCloudVersion = '2022.0.0'
        reactorVersion = '3.5.8'
        springCloudStarterVersion = '3.1.7'
        springAliCloudVersion = '2022.0.0.0-RC2'
        curVersion = project.version == 'unspecified' ? this.rootProject.version : project.version
        jdkVersion = []
    }
    compileJava {
        def curJdkVersion = JavaVersion.VERSION_17
        for (final def j in jdkVersion) {
            if (j.key == project.name) {
                curJdkVersion = j.value
            }
        }
        sourceCompatibility = curJdkVersion
        targetCompatibility = curJdkVersion
    }
    dependencies {
        testCompileOnly("org.projectlombok:lombok:$lombokVersion")
        compileOnly("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
        compileOnly("org.mapstruct:mapstruct:$mapstructVersion")
        compileOnly("org.slf4j:slf4j-api:1.7.36")
        annotationProcessor("org.mapstruct:mapstruct-processor:$mapstructVersion")
        annotationProcessor("io.ebean:querybean-generator:$ebeanVersion")
        annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: springBootVersion
        compileOnly group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: springBootVersion

    }

    test {
        useJUnitPlatform()
    }

//    task sourcesJar(type: Jar) {
//        from sourceSets.main.allJava
//        archiveClassifier = 'sources'
//    }

    publishing {
        repositories {
            publications {
                maven(MavenPublication) {
                    groupId = "org.start2do"
                    artifactId = project.name
                    version = curVersion
                    from components.java
//                    artifact sourcesJar
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }
                }
            }
            maven {
                if (curVersion.endsWith('-SNAPSHOT')) {
                    url SNAPSHOTpushMavenUrl
                } else {
                    url pushMavenUrl
                }
                allowInsecureProtocol true
                credentials {
                    username = System.getenv("user")
                    password = System.getenv("password")
                }
            }
        }
    }
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

}
task cleanTemp(dependsOn: [':clean']) {
    dependsOn ':clean'
}
task buildTaskClass(dependsOn: ['cleanTemp']) {
    dependsOn ':classes'
}
task push(dependsOn: ['buildTaskClass']) {
    dependsOn(":jar")
    dependsOn(":publishMavenPublicationToMavenRepository")
}


